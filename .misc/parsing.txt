

TODO:
add support for extended commands:
handle multiple parameters (e.g., MODE #channel +o user)
handle optional trailing arguments (e.g., TOPIC #channel :New topic)

extend parser to handle both client authentication and command parsing




(wip - trying to untagle syntax and format rules...)

- Channels - names

String beginning with a '&', '#', '+' or '!' character
length up to 50 characters
SHALL NOT contain any
spaces (' ')
a control G (^G or ASCII 7)
a comma (',')

* A colon (':') can also be used as a delimiter for the channel mask *
** Channel names are case insensitive **

*** Because of IRC's Scandinavian origin,
    the characters {}|^ are considered to be the lower case equivalent of
    the characters []\~, respectively.
    This is a critical issue when determining the equivalence of
    two nicknames or channel names. ***

- Messages

Each IRC message may consist of up to three parts:

the prefix (optional)
the command
and the command parameters (max of 15)
* the prefix, command and all parameters are separated by one ASCII space (0x20) each *

The presence of a prefix is indicated with a single leading ASCII colon char (':', 0x3b),
which MUST be the fist char of the message itself
* There MUST be NO gap (whitespace) between the colon and the prefix *
* if the prefix is missing from the message, it is assumed to have originated from the connection
from which it was recieved from *

Clients SHOULD NOT use a prefix when sending a message
if they use one, the only valid prefix is the registered nickname associated with the client

The command MUST either be a valid IRC command or a three (3) digit number represented in ASCII text

IRC messages are always lines of characters terminated with a
CR-LF (Carriage Return - Line Feed) pair,
and these messages SHALL NOT exceed 512 characters in length
* counting all chars including the trailing CR-LF *,
thus there are 510 characters maximum allowed for the command and its parameters



- Clients - User - Nickname

IRC nicknames are case-insensitive

Some nicknames may be reserved on certain servers
(e.g., Admin, root, or nicknames related to services like NickServ, ChanServ)

unique nickname (handle default?)
(KILL messages are sent whenever 'duplicates' are detected,
that is an attempt to register two users with the same nickname,
in the hope that both of them will dissapear and only 1 will reappear)
* When a client is removed as the result of a KILL message,
the server SHOULD add the nickname to the list of unavailable nicknames *
* the comment given MUST reflect the actual reason for the KILL *
* comment also shows a 'kill-path' ..(prevent/discourage fake KILLs..) *

Non-empty string with the following restrictions:

Length - maximum of 9 characters
* (SHOULD accept longer strings, may become used in future evolution of the protocol) *

Allowed Characters

First character:
MUST be a letter (A-Z or a-z) or any of the following special characters: []\^{}_`
Subsequent characters:
Can be letters (A-Z or a-z), digits (0-9), or any of the following special characters: -[]\^{}_`

MUST NOT contain any of the follwing characters:
space(' '), comma(','), asterisk('*'), question mark('?'), exclamation mark('!'), at sign('@')

MUST NOT start with any of the following characters:
dollar('$'), colon(':')

MUST NOT start with a character listed as a
channel type:
regular channels ('#')
local channels ('&')

channel membership prefix:
founder prefix ('~')
protected prefix ('&')
operator prefix ('@')
halfop prefix ('%')
voice prefix ('+')

or prefix listed in the IRCv3 multi-prefix Extension


* without a multi-prefix, an IRC server typically shows only the highest level prefix a user has *

SHOULD NOT contain any dot characters('.')

Examples of valid nicknames
Alice, john123, user_1, [Br4vo], SuperMan, ^Tester_

Examples of invalid nicknames
123John (starts with a number)
John@Home (contains the @ char, which is not allowed)
LongNickname123 (too many chars)



