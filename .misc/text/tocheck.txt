
TODO:

Message should store replies for valid commands **!!!
the validator class should return true and still set the rpl **!!!

check if we remove /t from trim (rfc 1459 2.3.1)

add NUL to forbidden char in params

silently ignore numeric reply sent from client

when using o and b options on MODE, limit of 3 (o and .. or o and .. and ..)?

check where to crlf the message (in server or in message)

add missing rpl templates 
maybe split or reorganise templates and enum
(since replies for valid commands must also be generated by channel,user and server)

reduce files by:
handling input tokenizing in parser instead of message (parse(string) instead of parse(tokens),

putting parsing_utils functions in class code (if doable)

handle commands to ignore in validateCommand() ? before checking through the commandMap..

add command syntax and example in each _validate* functions

utility function to validate param number, and if trailing should or should not exist?

utility function to apply a validation function on each multiparam of a string (ex, tokenize JOIN params, then call :
bool validMultiParam = paramIter(paramTokens[0], _isValidChannelName);

*****

fix _validate* functions to handle multi params:

**

IRC commands that support
multiple comma-separated parameters:

JOIN <channel>{,<channel>} [<key>{,<key>}]
ex:
JOIN #channel1,#channel2,#channel3 key1,,key3


PART <channel>{,<channel>} [:<message>]
ex:
PART #channel1,#channel2,#channel3 :Goodbye everyone!
** in rfc 1458, no trailing ?

KICK <channel> <user> [:<comment>]
KICK <channel>{,<channel>} <user>{,<user>} [:<comment>]
** info online is confusing.. magbe just one channel and one target, or one channel and up to 4 targets?..


INVITE <user>{,<user>} <channel>
ex:
INVITE user1,user2,user3 #channel
** rfc 1459 does not mention multiple users in single cmd..



PRIVMSG <target>{,<target>} :<message>
NOTICE <target>{,<target>} :<message>

ex:
PRIVMSG user1,user2,#channel :Hello everyone!

***


ignore CAP command

password rules

cout or cerr ?

atoi if we overflow all the way back to valid range.. ?

add multiple replies to pending queue for successfull authentication >>?

implement unique nock validation

bool	isNickAvailable(const std::map<std::string, int> nickMap, const std::string &nickname)
{
	
}


can a function return an iterator on only the key or the value of a map ??

