
******************
* MODE (channel) *
******************

Implemented modes: i, t, k, o, l

*****
+i (Invite-Only Mode)

Description:
When set, only invited users can join the channel.

Command to Enable: MODE #channel +i
Command to Disable: MODE #channel -i

Effect:
Clients attempting to join without an invitation
will receive ERR_INVITEONLYCHAN (473).
*****

*****
+t (Topic Lock Mode)

Description:
When set, only channel operators can change the channel topic.

Command to Enable: MODE #channel +t
Command to Disable: MODE #channel -t

Effect:
Non-operator clients attempting to change the topic
will receive ERR_CHANOPRIVSNEEDED (482).
*****

*****
+k (Key Mode)

Description:
When set, a key (password) is required to join the channel.

Command to Enable: MODE #channel +k <key>
Command to Disable: MODE #channel -k

Effect:
Clients attempting to join without the correct key
will receive ERR_BADCHANNELKEY (475).
*****

*****
+o (Operator Mode)

Description:
Grants or removes operator privileges for a user in the channel.

Command to Enable: MODE #channel +o <nickname>
Command to Disable: MODE #channel -o <nickname>

Effect:
Operators can change modes, kick users,
and manage topics when +t is set.

Clients not in the channel or not existing
will return ERR_USERNOTINCHANNEL (441).
*****

*****
+l (Limit Mode)

Description:
Limits the number of users allowed in the channel.

Command to Enable: MODE #channel +l <number>
Command to Disable: MODE #channel -l

Effect:
Once the limit is reached, new join attempts
will receive ERR_CHANNELISFULL (471).
*****


Example:

Client sends:

	MODE #channel

Server replies:

	:ircserv 324 nickname #channel +itk secretkey

Modes applied:

+i: Channel is invite-only.
+t: Only operators can change the topic.
+k: Channel requires the key secretkey to join.

********************************************************************************
********************************************************************************

cmd: MODE
params: <channel> *( ( "-" / "+" ) *<modes> *<modeparams> )
modes: *( "i" / "t" / "k" / "o" / "l" )

command is provided so that users may query and change
the characteristics of a channel.

For more details on available modes and their uses,
see "Internet Relay Chat: Channel Management" [IRC-CHAN].

Note that there is a maximum limit of three (3) changes per command
for modes that take a parameter.

REPLIES:

	ERR_NEEDMOREPARAMS              ERR_KEYSET
	ERR_NOCHANMODES                 ERR_CHANOPRIVSNEEDED
	ERR_USERNOTINCHANNEL            ERR_UNKNOWNMODE
	RPL_CHANNELMODEIS
	RPL_BANLIST                     RPL_ENDOFBANLIST
	RPL_EXCEPTLIST                  RPL_ENDOFEXCEPTLIST
	RPL_INVITELIST                  RPL_ENDOFINVITELIST
	RPL_UNIQOPIS

(following examples are given to help understand the syntax of the MODE command,
but refer to modes defined in [IRC_CHAN])
ex:
(command to make set the channel "#42" key to "fortytwo")

	MODE #42 +k fortytwo

(command to make remove the channel key on channel "#42")

	MODE #42 -k fortytwo

(command to give channel operator privileges to SomeDude on channel "#42")

	MODE #42 +o SomeDude

(command to set the limit for the number of users on channel "#42" to 10)

	MODE #42 +l 10

(user "SomeDude" removing the limit for the number of users on channel "#42")

	:SomeDude MODE #42 -l

**TODO: (insert example for flags i t k o l)

********************************************************************************

******************************************************
* Limit of 3? (Key Points of the Three-Change Limit) *
******************************************************

Modes That Take Parameters:

Only modes requiring a parameter are restricted by the three-change limit.

For our ft_irc implementation, these are:

	+k <key>: Key mode requires a password.
	+o <nickname>: Operator mode requires a nickname.
	+l <number>: Limit mode requires a numeric value.

Modes that do not take parameters (+i and +t) are not restricted by this limit.

Multiple Changes in a Single Command:

Clients can send a single MODE command with multiple mode changes.

If more than three parameterized mode changes are included in a single command,
the server processes only the first three and ignores the rest.

This applies whether the changes are setting (+) or removing (-) modes.

**********************
* Practical Examples *
**********************

Valid Mode Changes (3 or fewer with parameters):

Example Command:

	MODE #channel +o user1 +o user2 +o user3

Result:

	All three changes (+o user1, +o user2, +o user3) are applied.

Example Command:

	MODE #channel +o user1 +k secret +l 10

Result:

	Modes +o user1, +k secret, and +l 10 are applied.

***

Invalid Mode Changes (More than 3 with parameters):

Example Command:

	MODE #channel +o user1 +o user2 +o user3 +o user4

Result:

	Only the first three changes (+o user1, +o user2, +o user3) are applied.
	The fourth change (+o user4) is ignored.

Example Command:

	MODE #channel +o user1 +o user2 +o user3 +k secret +l 10

Result:

	Only the first three changes (+o user1, +o user2, +o user3) are applied.
	The +k secret and +l 10 changes are ignored.

***********************
* Implementation Tips *
***********************

Tracking Changes:

We could maintain a counter during the processing of each MODE command
to count parameterized changes (+o, +k, +l, etc.).

Then, stop processing once three parameterized changes have been applied.

***

Error Handling:

If additional mode changes are ignored,
it’s common practice not to return an error message.
The server silently stops processing further changes.

***

Mode Changes Without Parameters:

Modes that don’t require parameters (+i, +t)
are not counted toward the limit.

Example:

	MODE #channel +i +t +o user1 +o user2 +o user3

Here, +i and +t are processed,
and three parameterized changes (+o user1, +o user2, +o user3)
are also processed.

***********************************
* Detailed Behavior for Each Mode *
***********************************

+k (Key Mode):

Parameter: A key (password) for the channel.
Counted Toward Limit: Yes.

Example:

	MODE #channel +k secret +k newkey

Only the first key change (+k secret) is applied;
the second is ignored.

***

+o (Operator Mode):

Parameter: A nickname to grant operator status.
Counted Toward Limit: Yes.

Example:

	MODE #channel +o user1 +o user2 +o user3 +o user4

Only the first three operators (user1, user2, user3)
are granted operator status.

***

+l (Limit Mode):

Parameter:
A numeric value specifying the maximum number of users allowed in the channel.
Counted Toward Limit: Yes.

Example:

	MODE #channel +l 10 +l 20

Only the first limit change (+l 10) is applied;
the second is ignored.

***

+i (Invite-Only Mode):

Parameter: None.
Counted Toward Limit: No.

***

+t (Topic Lock Mode):
Parameter: None.
Counted Toward Limit: No.

*********************************************
* Complete Example Command with Mixed Modes *
*********************************************

Command:

	MODE #channel +it +o user1 +o user2 +o user3 +k secret +l 10

Server response:

	:ircserv 324 nickname #channel +it +o user1 +o user2 +o user3

+it (non-parameterized modes) are applied.

The first three parameterized changes
(+o user1, +o user2, +o user3) are applied.

The remaining changes
(+k secret, +l 10) are ignored.

********************************************************************************

*************************
* 324 RPL_CHANNELMODEIS *
*************************

:SERVER_NAME 324 <client_nickname> <channel> <channel_modes> [<mode_parameters>]
:ircserv 324 nickname #channel +itk key123

Description:
Sent in response to a `MODE` command
to display the current mode settings for a channel.

The `<channel_modes>` field lists the active modes,
(e.g., `+itkol` for topic lock, invite-only, key, etc.).

The `<mode_parameters>` field includes arguments for modes that require them
(e.g., the key for +k, or the user limit for +l).


Context:
This reply is typically sent when:

A client sends a MODE command
to query the current modes of a channel:

	MODE #channel.
	
A client modifies the channel modes
using MODE with parameters:

	MODE #channel +itk key123.

***

Example Scenarios:

Querying Modes:

Client sends:

	MODE #channel
	
Server replies:

	:ircserv 324 nickname #channel +itk key123

Modifying Modes:

Client sends:

	MODE #channel +k secretkey

Server replies:

	:ircserv 324 nickname #channel +k secretkey

***************************************************************
* Does the Client Need to Be in the Channel to See the Modes? *
***************************************************************

General Modes (+i, +t, etc.):

A client does not need to be in the channel
to query the modes (MODE #channel).

The server will respond with

	324 RPL_CHANNELMODEIS

and list the active modes.

Example:

Client sends:

	MODE #channel

Server replies:

	:ircserv 324 nickname #channel +it

***

Restricted Information (+k Key and +l Limit):

A client must be in the channel
to see sensitive mode parameters like:

	The key (+k) for the channel.
	The user limit (+l).

If the client is not in the channel,
the server typically omits these details.

Example (Client Not in Channel):

Client sends:

	MODE #channel

Server replies:

	:ircserv 324 nickname #channel +it

Example (Client in Channel):

Client sends:

	MODE #channel

Server replies:

	:ircserv 324 nickname #channel +itk secretkey

*************************************
* Why Restrict Key (+k) Visibility? *
*************************************

The channel key (+k) is considered sensitive information because:

It serves as a password for joining the channel.
Revealing it to clients who are not members of the channel
would compromise security.

*****************************
* Implementation Guidelines *
*****************************

If the Client Is in the Channel:

We show all modes,
including the key (+k) and limit (+l).

Example:

	:ircserv 324 nickname #channel +itk secretkey

***

If the Client Is Not in the Channel:

We show only non-sensitive modes (+i, +t),
but omit the key and limit.

Example:

	:ircserv 324 nickname #channel +it

***

Keyless Channels (-k):

If the key is not set,
we can display the modes without parameters
regardless of whether the client is in the channel.

**! We should send

	ERR_NOTONCHANNEL (442)

if a client attempts a mode modification
on a channel they are not part of.

********************************************************************************
