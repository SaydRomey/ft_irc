

# Standardized output macros
INFO		= echo "[$(BOLD)$(PURPLE)$(1)$(RESET)]\t$(ORANGE)$(2)$(RESET)$(GRAYTALIC)$(3)$(RESET)"
SUCCESS		= echo "[$(BOLD)$(PURPLE)$(1)$(RESET)]\t$(GREEN)$(2)$(RESET)"
WARNING		= echo "[$(BOLD)$(PURPLE)$(1)$(RESET)]\t$(YELLOW)$(2)$(RESET)"
ERROR		= echo "❌ Error: $(1)$(RED)$(2)$(RESET)"
UPCUT		= printf "$(UP)$(ERASE_LINE)"

# # Utility macros

# Check if a command exists
define CHECK_COMMAND
	if ! command -v $(1) > /dev/null; then \
		$(call ERROR,Command Missing:,The required command '$(1)' is not installed.); \
		exit 1; \
	fi
endef
# $(call CHECK_COMMAND,docker)

# Check network connectivity to a specific IP and Port
define CHECK_CONNECTION
	if ! nc -z $(1) $(2); then \
		$(call ERROR,Connection Error,Unable to reach $(1):$(2). Check if the server is running.); \
		exit 1; \
	fi
endef
# $(call CHECK_CONNECTION,$(IRC_SERVER_IP),$(IRC_SERVER_PORT))

# Wait for a specific IP and port to become available
define WAIT_FOR_CONNECTION
	while ! nc -z $(1) $(2); do \
		$(call INFO,Connection,,Waiting for $(1):$(2) to become available...); \
		sleep 1; \
		$(call UPCUT); \
	done
	@$(call SUCCESS,Connection,$(1):$(2) is now reachable!)
endef
# $(call WAIT_FOR_CONNECTION,$(IRC_SERVER_IP),$(IRC_SERVER_PORT))

# Check if a port is available
define CHECK_PORT
	if command -v lsof > /dev/null; then \
		if lsof -i :$(1) | grep LISTEN > /dev/null 2>&1; then \
			$(call ERROR,Port $(1),is already in use!); \
			exit 1; \
		fi; \
	elif command -v netstat > /dev/null; then \
		if netstat -an | grep ":$(1) .*LISTEN" > /dev/null; then \
			$(call ERROR,Port $(1),is already in use!); \
			exit 1; \
		fi; \
	else \
		$(call WARNING,Port Check,Could not determine if port $(1) is in use. Skipping check.); \
	fi
endef
# $(call CHECK_PORT,$(IRC_SERVER_PORT))

# Ensure a Docker image exists
define CHECK_IMAGE
	if ! docker images | grep -q "$(1)"; then \
		$(call INFO,Docker,Pulling image '$(1)'...); \
		docker pull $(1); \
	else \
		$(call SUCCESS,Docker,Image '$(1)' is already available.); \
	fi
endef
# $(call CHECK_IMAGE,$(WEECHAT_IMAGE))

# Check if a Docker container exists (running or stopped)
# Sets a shell variable CONTAINER_EXISTS=true/false
define CHECK_CONTAINER_EXISTS
	if docker ps -a --format '{{.Names}}' | grep -q "^$(1)$$"; then \
		CONTAINER_EXISTS=true; \
	else \
		CONTAINER_EXISTS=false; \
	fi
endef
# $(call CHECK_CONTAINER_EXISTS,$(WEECHAT_CONT))
# if [ "$(CONTAINER_EXISTS)" = "true" ]; then \
	$(call STOP_CONTAINER,$(WEECHAT_CONT))

# Stop the container if it is currently running
define STOP_CONTAINER
	if docker ps --format '{{.Names}}' | grep -q "^$(1)$$"; then \
		$(call INFO,Docker,Stopping container '$(1)'...); \
		docker stop $(1) > /dev/null; \
		$(call SUCCESS,Docker,Container '$(1)' was stopped.); \
	fi
endef
# $(call STOP_CONTAINER,$(WEECHAT_CONT))

# Stop and remove the container if it exists
define REMOVE_CONTAINER
	if docker ps -a --format '{{.Names}}' | grep -q "^$(1)$$"; then \
		$(call INFO,Docker,Removing container '$(1)'...); \
		docker stop $(1) > /dev/null || true; \
		docker rm -f $(1) > /dev/null; \
		$(call SUCCESS,Docker,Container '$(1)' was stopped and removed.); \
	fi
endef
# $(call REMOVE_CONTAINER,$(WEECHAT_CONT))

#
#
#
# Check if a Docker container exists and stop/remove it if it does
define CLEANUP_CONTAINER
	if docker ps -a --format '{{.Names}}' | grep -q "^$(1)$$"; then \
		$(call INFO,Docker,Removing existing container '$(1)'...); \
		docker stop $(1) > /dev/null; \
		docker rm -f $(1) > /dev/null; \
		$(call SUCCESS,Docker,Container '$(1)' was stopped and removed.); \
	fi
endef
# $(call CLEANUP_CONTAINER,$(WEECHAT_CONT))

# Calls the macro CLEANUP_CONTAINER on multiple containers
define CLEANUP_MULTIPLE_CONTAINERS
	for cont in $(1); do \
		$(call CLEANUP_CONTAINER,$$cont); \
	done
endef
# $(call CLEANUP_MULTIPLE_CONTAINERS,"container1 container2 container3")

# Macro to check if a Docker container exists, is running, and take action
# Usage: $(call MANAGE_CONTAINER,container_name,action)
# - container_name: Name of the Docker container
# - action: "stop", "remove" or "restart"
define MANAGE_CONTAINER
	# Check if the container exists
	@if docker ps -a --format '{{.Names}}' | grep -q "^$(1)$$"; then \
		CONTAINER_EXISTS=true; \
	else \
		CONTAINER_EXISTS=false; \
	fi; \
	\
	# Check if the container is running
	@if docker ps --format '{{.Names}}' | grep -q "^$(1)$$"; then \
		CONTAINER_RUNNING=true; \
	else \
		eval CONTAINER_RUNNING=false \
	fi; \
	\
	# Perform action based on the action argument
	@if [ "$(CONTAINER_EXISTS)" = "true" ]; then \
		if [ "$(2)" = "stop" ]; then \
			if [ "$(CONTAINER_RUNNING)" = "true" ]; then \
				$(call INFO,Docker,Stopping container '$(1)'...); \
				docker stop $(1) > /dev/null; \
				$(call SUCCESS,Docker,Container '$(1)' stopped.); \
			else \
				$(call WARNING,Docker,Container '$(1)' is not running. Skipping stop.); \
			fi; \
		elif [ "$(2)" = "remove" ]; then \
			$(call INFO,Docker,Removing container '$(1)'...); \
			docker rm -f $(1) > /dev/null; \
			$(call SUCCESS,Docker,Container '$(1)' removed.); \
		elif [ "$(2)" = "restart" ]; then \
			$(call INFO,Docker,Restarting container '$(1)'...); \
			docker restart $(1) > /dev/null; \
			$(call SUCCESS,Docker,Container '$(1)' restarted.); \
		else \
			$(call ERROR,Docker,Invalid action '$(2)'. Supported actions: stop, remove, restart.); \
			exit 1; \
		fi; \
	else \
		$(call INFO,Docker,No action taken. Container '$(1)' does not exist.); \
	fi
endef
# $(call MANAGE_CONTAINER,$(WEECHAT_CONT),stop)

#

# Start Docker if it's not running
define START_DOCKER
	@if ! docker info > /dev/null 2>&1; then \
		if [ "$(OS)" = "Darwin" ]; then \
			$(call INFO,Docker,Starting Docker on macOS...); \
			open --background -a Docker; \
			while ! docker info > /dev/null 2>&1; do \
				$(call INFO,Docker,,Waiting for Docker to be ready...); \
				sleep 1; \
				$(call UPCUT); \
			done; \
		else \
			$(call WARNING,Docker,Please start Docker manually on your system.); \
			exit 1; \
		fi; \
	fi
endef
# $(call START_DOCKER)

# 

# Remove temporary files
define CLEAN_TEMP_FILES
	@if [ -n "$(wildcard $(1))" ]; then \
		$(REMOVE) $(1); \
		$(call SUCCESS,Cleanup,Temporary files removed: $(1)); \
	else \
		$(call WARNING,Cleanup,No temporary files found: $(1)); \
	fi
endef
# $(call CLEAN_TEMP_FILES,$(TMP_DIRS))

#





#
# CHECK_PORT macro flowchart
CHECK_PORT → Is lsof available?
	├── Yes → Is port $(1) in use?
	│         ├── Yes → ERROR: Port is already in use → Exit
	│         ├── No → Proceed silently
	├── No → Is netstat available?
	│         ├── Yes → Is port $(1) in use?
	│         │         ├── Yes → ERROR: Port is already in use → Exit
	│         │         ├── No → Proceed silently
	├── No → WARNING: Could not determine if port is in use → Proceed

